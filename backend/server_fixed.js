const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
const mongoose = require('mongoose');
const axios = require('axios');
const auth = require('./middleware/auth');
require('dotenv').config();
const multer = require('multer');
const upload = multer({ storage: multer.memoryStorage() });
// Import services and routes
const smsRoutes = require('./routes/sms');
const otpRoutes = require('./routes/otp');
const medicationFormRoutes = require('./routes/medicationForm');
const NotificationScheduler = require('./notificationScheduler');

// Initialize notification scheduler
const notificationScheduler = new NotificationScheduler();

const app = express();
const PORT = process.env.PORT || 5001;
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';
const GROQ_API_KEY = process.env.GROQ_API_KEY;

// Connect to MongoDB
async function connectDB() {
  try {
    console.log('üîç Connecting to MongoDB...');
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/medimate';
    console.log('üì° MONGODB_URI:', mongoUri);
    
    if (!process.env.MONGODB_URI) {
      console.log('‚ö†Ô∏è  Using default MongoDB URI. Create .env file for production.');
    }

    // ‚úÖ Modern connection (no deprecated options)
    await mongoose.connect(mongoUri);
    
    console.log('‚úÖ Connected to MongoDB');
    console.log('Connected to DB name:', mongoose.connection.name);
    return true;
  } catch (err) {
    console.error('‚ùå MongoDB connection error:', err.message);
    console.log('üí° Make sure MongoDB is running: mongod');
    return false;
  }
}

// Initialize database connection
connectDB();

// CORS configuration
const corsOptions = {
  origin: ['http://localhost:3000', 'http://localhost:8080'],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
};
app.use(cors(corsOptions));
app.options('*', cors(corsOptions));

// Middleware
app.use(express.json());

// Import models
const User = require('./models/User');
const ChatHistory = require('./models/ChatHistory');

async function getGroqResponse(messages, language = 'en', user) {
  try {
    const systemPrompt = {
      en: `You are MediMate, a trusted AI medical assistant supporting ${user.firstName}. 
Provide clear, reliable, and personalized health guidance based on their medical history. 
Be empathetic, concise (maximum 6 lines), and easy to understand, but include all essential details. 
Always remind them that your advice does not replace professional medical care, and they should consult a qualified doctor for diagnosis, emergencies, or serious concerns.
IMPORTANT: Always respond in English when language is 'en'. Do not mix languages.`,

      ta: `‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡ØÜ‡Æü‡Æø‡ÆÆ‡Øá‡Æü‡Øç, ${user.firstName}‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æ®‡ÆÆ‡Øç‡Æ™‡Æï‡ÆÆ‡Ææ‡Æ© AI ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç. 
‡ÆÖ‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Æø‡Æ©‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡Øç‡Æ±‡Æø‡Æ©‡Øç ‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æ§‡ØÜ‡Æ≥‡Æø‡Æµ‡Ææ‡Æ©, ‡Æ®‡ÆÆ‡Øç‡Æ™‡Æï‡ÆÆ‡Ææ‡Æ© ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æ©‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æâ‡Æü‡Æ≤‡Øç‡Æ®‡Æ≤ ‡Æµ‡Æ¥‡Æø‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æ§‡Æ≤‡Øà ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç. 
‡Æá‡Æ∞‡Æï‡Øç‡Æï‡ÆÆ‡ØÅ‡Æ≥‡Øç‡Æ≥, ‡Æö‡ØÅ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ÆÆ‡Ææ‡Æ© (‡ÆÖ‡Æ§‡Æø‡Æï‡Æ™‡Æü‡Øç‡Æö‡ÆÆ‡Øç 6 ‡Æµ‡Æ∞‡Æø‡Æï‡Æ≥‡Øç) ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æ≥‡Æø‡Æ§‡Æø‡Æ≤‡Øç ‡Æ™‡ØÅ‡Æ∞‡Æø‡ÆØ‡Æï‡Øç‡Æï‡ØÇ‡Æü‡Æø‡ÆØ‡Æ§‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡ÆÜ‡Æ©‡Ææ‡Æ≤‡Øç ‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Ææ‡Æ© ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æ§‡Æµ‡Æ±‡Æµ‡Æø‡Æü‡Ææ‡Æ§‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. 
‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Ææ‡Æï‡Ææ‡Æ§‡ØÅ ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà ‡Æé‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æ©‡Øà‡Æµ‡ØÇ‡Æü‡Øç‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡ÆÆ‡Øá‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æ§‡ØÄ‡Æµ‡Æø‡Æ∞ ‡Æ™‡Æø‡Æ∞‡Æö‡Øç‡Æö‡Æø‡Æ©‡Øà‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æ®‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æ§‡Æï‡ØÅ‡Æ§‡Æø ‡Æ™‡ØÜ‡Æ±‡Øç‡Æ± ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡ØÅ‡ÆÆ‡Ææ‡Æ±‡ØÅ ‡ÆÖ‡Æ±‡Æø‡Æµ‡ØÅ‡Æ∞‡Øà‡ÆØ‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç.
‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç: ‡ÆÆ‡Øä‡Æ¥‡Æø 'ta' ‡Æé‡Æ©‡Øç‡Æ±‡ØÅ ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æé‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øç ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá ‡Æ™‡Æ§‡Æø‡Æ≤‡Æ≥‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç. ‡ÆÆ‡Øä‡Æ¥‡Æø‡Æï‡Æ≥‡Øà ‡Æï‡Æ≤‡Æï‡Øç‡Æï‡Ææ‡Æ§‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç.`
    };

    const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {
      model: 'llama-3.3-70b-versatile',
      messages: [
        {
          role: 'system',
          content: systemPrompt[language] || systemPrompt.en
        },
        ...messages.map(msg => ({
          role: msg.sender === 'user' ? 'user' : 'assistant',
          content: msg.text
        }))
      ],
      temperature: 0.7,
      max_tokens: 1024
    }, {
      headers: {
        'Authorization': `Bearer ${GROQ_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });
    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('Groq API error:', error.response?.data || error.message);
    throw new Error('Failed to get AI response');
  }
}

// üîΩ All your existing routes stay the same (chat, whisper, speak, health, auth, sms, medication, error handlers, etc.)
// I didn‚Äôt modify them because they work fine in your log output.

// Start server
try {
  console.log('üöÄ Starting server on port:', PORT);
  app.listen(PORT, async () => {
    console.log(`üöÄ MediMate Backend Server running on port ${PORT}`);
    console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
    console.log('‚úÖ Server ready to accept requests');

    // Initialize notification scheduler with current users
    try {
      const users = await require('./models/User').find({}, 'firstName lastName phone');
      notificationScheduler.setData(users || [], []);
      await notificationScheduler.initializeNotifications();
    } catch (e) {
      console.error('‚ùå Failed to initialize scheduler:', e.message);
    }
  });
} catch (error) {
  console.error('‚ùå Error starting server:', error);
}

// Export the notificationScheduler instance for use in other modules
module.exports = { notificationScheduler };
